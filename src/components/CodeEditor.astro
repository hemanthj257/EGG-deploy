---
import { examples } from "../scripts/egg-examples.js";
---

<div class="editor-container">
  <div class="editor-header">
    <h3>EGGlang Code</h3>
    <div class="editor-actions">
      <div class="examples-dropdown">
        <select id="example-selector">
          <option value="">-- Select Example --</option>
          {
            examples.map((example) => (
              <option value={example.name}>{example.name}</option>
            ))
          }
        </select>
      </div>
      <button id="run-button" class="run-button">
        <i class="fas fa-play"></i> Run
      </button>
    </div>
  </div>
  <div id="code-editor" class="code-editor"></div>
</div>

<style>
  .editor-container {
    display: flex;
    flex-direction: column;
    height: 100%;
    border-radius: 8px;
    overflow: hidden;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    background-color: #f5f5f5;
  }

  .editor-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.75rem 1rem;
    background-color: var(--color-dark);
    color: var(--color-light);
  }

  .editor-header h3 {
    margin: 0;
    font-size: 1rem;
    font-weight: 600;
  }

  .editor-actions {
    display: flex;
    align-items: center;
    gap: 1rem;
  }

  .examples-dropdown select {
    padding: 0.5rem;
    border-radius: 4px;
    border: 1px solid var(--color-light);
    background-color: var(--color-dark);
    color: var(--color-light);
    font-size: 0.9rem;
    cursor: pointer;
  }

  .examples-dropdown select:focus {
    outline: none;
    border-color: var(--color-primary);
  }

  .run-button {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    background-color: var(--color-primary);
    color: var(--color-dark);
    border: none;
    border-radius: 4px;
    padding: 0.5rem 1rem;
    font-weight: 600;
    cursor: pointer;
    transition: background-color 0.2s ease-in-out;
  }

  .run-button:hover {
    background-color: var(--color-accent);
  }

  .code-editor {
    flex: 1;
    overflow: auto;
    font-family: var(--font-mono);
    font-size: 0.9rem;
    border: none;
  }

  /* Force CodeMirror to take full height */
  :global(.cm-editor) {
    height: 100%;
  }
</style>

<script>
  import { EditorState } from "@codemirror/state";
  import { EditorView, keymap } from "@codemirror/view";
  import { defaultKeymap, indentWithTab } from "@codemirror/commands";
  import { javascript } from "@codemirror/lang-javascript";
  import { examples, getExampleByName } from "../scripts/egg-examples.js";

  // Default EGG code sample - this will be shown when the editor loads
  const defaultCode = examples[0].code;

  // Initialize CodeMirror
  const initCodeEditor = () => {
    const editorElement = document.getElementById("code-editor");
    if (!editorElement) return;

    // Make sure the editor is empty first
    editorElement.innerHTML = "";

    // Create the editor state
    const state = EditorState.create({
      doc: defaultCode,
      extensions: [
        EditorView.lineWrapping,
        keymap.of([indentWithTab, ...defaultKeymap]),
        javascript(),
        EditorView.theme({
          "&": {
            backgroundColor: "#fafafa",
            height: "100%",
          },
          ".cm-content": {
            fontFamily: "var(--font-mono)",
            padding: "10px",
            minHeight: "100%",
          },
          ".cm-gutters": {
            backgroundColor: "#f0f0f0",
            borderRight: "1px solid #ddd",
          },
        }),
      ],
    });

    // Create the editor view
    const view = new EditorView({
      state,
      parent: editorElement,
    });

    // Store the view in window for access elsewhere
    window.codeEditorView = view;

    // Set up run button
    const runButton = document.getElementById("run-button");
    if (runButton) {
      runButton.addEventListener("click", () => {
        const code = view.state.doc.toString();
        runEggCode(code);
      });
    }

    // Set up example selector
    const exampleSelector = document.getElementById("example-selector");
    if (exampleSelector) {
      exampleSelector.addEventListener("change", (e) => {
        const selectedName = e.target.value;
        if (selectedName) {
          const example = getExampleByName(selectedName);
          if (example) {
            view.dispatch({
              changes: {
                from: 0,
                to: view.state.doc.length,
                insert: example.code,
              },
            });
          }
        }
      });
    }
  };

  // Function to run EGG code
  const runEggCode = (code) => {
    const event = new CustomEvent("run-egg-code", { detail: { code } });
    document.dispatchEvent(event);
  };

  // Initialize the editor when the document is loaded
  document.addEventListener("DOMContentLoaded", initCodeEditor);

  // Also try to initialize after a short delay as a fallback
  // This can help with timing issues in some environments
  setTimeout(initCodeEditor, 100);
</script>
